#import the required packages
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

RUN

#initialising the NN
classifier = Sequential()
#step1-convolution
classifier.add(Conv2D(32,(3,3),input_shape=(64, 64, 3), activation= 'relu'))
#pooling
classifier.add(MaxPooling2D(pool_size=(2,2)))
#step2-adding a second convolution layer
classifier.add(Conv2D(32,(3,3),activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2,2)))

RUN

#step3 flatenning
classifier.add(Flatten())
#step4 full connection
classifier.add(Dense(units = 128, activation='relu'))
classifier.add(Dense(units = 1, activation='sigmoid'))

RUN

#compiling the NN
classifier.compile(optimizer = 'adam', loss='binary_crossentropy', metrics=['accuracy'])

RUN

#part2-fitting nn to the images
from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale =1./255,
                                  shear_range = 0.2,
                                  zoom_range= 0.2,
                                  horizontal_flip=True)

RUN

training_set = train_datagen.flow_from_directory('C:/Users/Dell/Desktop/training_set',
                                                target_size=(64,64),
                                                batch_size = 32,
                                                class_mode = 'binary')

RUN

test_datagen = ImageDataGenerator(rescale =1./255)
test_set = test_datagen.flow_from_directory('C:/Users/Dell/Desktop/test_set',
                                                target_size=(64,64),
                                                batch_size = 32,
                                                class_mode = 'binary')

RUN

classifier.fit_generator(training_set,
                        steps_per_epoch=100,
                        epochs =1,
                        validation_data= test_set,
                        validation_steps=20)

RUN

import numpy as np
from keras.preprocessing import image
test_image=image.load_img('C:/Users/Dell/Desktop/mix1/dog_or_cat_1.jpg',target_size=(64,64))
test_image=image.img_to_array(test_image)
test_image=np.expand_dims(test_image, axis=0)
result=classifier.predict(test_image)
training_set.class_indices
if result[0][0] == 1:
    prediction = 'dog'
else:
    prediction = 'cat'
print(prediction)

RUN

