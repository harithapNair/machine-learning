import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score

RUN

dataset = pd.read_csv('C:/Users/Dell/Desktop/diabetes.csv')

RUN

dataset.head()

RUN

print(len(dataset))
print (dataset.head())

RUN

#replace zeroes
zero_not_accepted = ['Glucose','BloodPressure','SkinThickness','BMI','Insulin']
for column in zero_not_accepted:
    dataset[column] = dataset[column].replace(0, np.NaN)
    mean = int(dataset[column].mean(skipna=True))
    dataset[column]=dataset[column].replace(np.NaN,mean)

RUN

#split dataset
X = dataset.iloc[:,0:8]
y = dataset.iloc[:,8]
X_train,X_test,y_train,Y_test = train_test_split(X,y,random_state=0, test_size=0.2)


RUN

#feature scaling
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_train = sc_X.transform(X_test)

RUN

#define the model: Init K-NN
classifier = KNeighborsClassifier(n_neighbors=11,p=2,metric='euclidean'

RUN

import math
math.sqrt(len(y_test))

RUN

#fit model
classifier.fit( X_train , y_train )

RUN

#predict the test set results
y_pred = classifier.predict(X_test)
y_pred

RUN

#evaluate model
cm = confusion_matrix(y_test,y_pred)
print(cm)

RUN

print(f1_score(y_test,y_pred))

RUN

print(accuracy_score(y_test, y_pred))